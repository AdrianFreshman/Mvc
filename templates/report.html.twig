{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
    <h1>Reports</h1>
    <h4 id="kmom01">Kmom01</h4>
    <p>Jag har erfarenhet endast genom oopython-kursen där vi skapade klasser och moduler, vilket var knepigt men roligt.

PHPs modell för klasser och objekt är baserad på koncepten i objektorienterad programmering, som inkluderar klasser, objekt, egenskaper och metoder. För att skapa dina första klasser i PHP behöver du förstå grundläggande begrepp som objekt, instansiering, egenskaper och metoder. <br><br>

Uppgiften me/report använde en kodstruktur som byggde på Symfony-ramverket och använde JavaScript-rutter och Twig-filer. Jag uppfattade den som välstrukturerad och lätt att följa.<br><br>

När det gäller artikeln “PHP The Right Way” är de delar som jag finner extra intressanta och värdefulla de som handlar om kodstil och programmeringsparadigmer, särskilt objektorienterad programmering och funktionell programmering. Jag vill lära mig mer om hur man kan använda funktioner som variabler och högre ordningens funktioner i PHP. De delar av artikeln som jag finner mest värdefulla är de som förklarar PSR-standarden för kodstil och hur man kan använda verktyg som PHP_CodeSniffer för att följa denna standard, samt länkar till andra resurser som Clean Code PHP.<br><br>Xdebug
En av de mest användbara verktygen inom mjukvaruutveckling är en ordentlig felsökare. Det låter dig spåra utförandet av din kod och övervaka innehållet i stacken. Xdebug, PHP:s felsökare, kan användas av olika IDE:er för att tillhandahålla brytpunkter och stackinspektion. Det kan också tillåta verktyg som PHPUnit och KCacheGrind att utföra kodtäckningsanalys och kodprofilering.<br><br>

Om du finner dig själv i en knipa, villig att ta till var_dump()/print_r(), och du fortfarande inte kan hitta lösningen - kanske behöver du använda felsökaren.<br><br>

Idag fick jag veta att det finns ett växande intresse för att använda Symfony-ramverket, JavaScript och nya CSS-ramverk i webbutveckling. Dessa tekniker blir allt mer populära på grund av deras förmåga att förenkla utvecklingsprocessen, öka produktiviteten och förbättra användarupplevelsen.<br><br>

Symfony är ett PHP-webbapplikationsramverk som tillhandahåller en standardiserad uppsättning verktyg och bästa praxis för att bygga webbapplikationer. Det är känt för sin modulära arkitektur, som gör det möjligt för utvecklare att bygga applikationer med hjälp av återanvändbara komponenter. Detta kan hjälpa till att minska utvecklingstiden och förbättra kodkvaliteten.<br><br>


TIL: att det finns ett växande intresse för att använda Symfony-ramverket, JavaScript och nya CSS-ramverk i webbutveckling. Dessa tekniker blir allt mer populära på grund av deras förmåga att förenkla utvecklingsprocessen, öka produktiviteten och förbättra användarupplevelsen</p>

<h4>Kmom02</h4


<p> Arv, komposition, interface och trait är alla objektorienterade konstruktioner som används i PHP för att strukturera och organisera kod.

Arv innebär att en klass kan ärva egenskaper och metoder från en annan klass. Komposition innebär att en klass kan innehålla en annan klass som en del av sin struktur. Interface definierar en uppsättning metoder som måste implementeras av en klass som implementerar gränssnittet. Trait tillhandahåller återanvändbara bitar av kod som kan användas av flera klasser.<br><br>

Arv kan vara fördelaktigt eftersom det möjliggör återanvändning av kod genom att en klass kan ta egenskaper och metoder från en befintlig klass och sedan lägga till eller modifiera dem. Detta minskar också kodupprepning och gör det enklare att underhålla koden.<br><br>

Komposition kan användas för att konstruera mer komplexa objekt genom att kombinera flera mindre objekt. Detta gör koden mer flexibel och lättare att ändra eftersom de mindre objekten kan bytas ut eller modifieras utan att påverka hela strukturen.<br><br>

Interface ger en standardiserad uppsättning av metoder som en klass måste implementera, vilket kan göra det lättare att byta ut en klass mot en annan som implementerar samma gränssnitt. Detta ökar också kodenhet och kan göra koden enklare att testa.<br><br>

Trait tillåter återanvändning av kod, särskilt kod som inte passar in i en hierarki av arv eller som används i flera olika klasser. Detta kan minska kodupprepning och göra koden mer lättunderhållen.<br><br>

Sammanfattningsvis kan användningen av objektorienterade konstruktioner såsom arv, komposition, interface och trait göra koden mer lättunderhållen, flexibel och lättare att ändra. Det kan också öka kodenhet och minska kodupprepning.<br><br>

I min implementation av kortspelet i uppgiften använde jag arv och komposition för att skapa en hierarki av klasser som representerade olika delar av spelet. Jag är ganska nöjd med min lösning, men jag tror att det finns utrymme för förbättringar i koden genom att skapa fler abstrakta klasser och gränssnitt, det var en del att ha att fixa med till build och compeser fixern,samt stoppa in en ny controller och annat, paths, api osv, men det det gick tillslut!<br><br>

Att modellera kortspelet med flödesdiagram och pseudokod var mycket hjälpsamt för att strukturera min kod. Det hjälpte mig att visualisera hur olika delar av spelet samverkar och identifiera eventuella problemområden som jag behövde ta hänsyn till i min kod. Men ananrs verkar jag nog ha missat en del steg i hur det ska fungera, använde mig av uml som jag använde till oopython<br><br>

Min TIL för detta kmom är hur man använder objektorienterade konstruktioner som arv, komposition, interface och trait i PHP för att skapa modulär och återanvändbar kod.</p>
    <h4>Kmom03</h4
    <p></p>
    <h4>Kmom04</h4
    <p></p>
    <h4>Kmom05</h4
    <p></p>
    <h4>Kmom06</h4
    <p></p>

{% endblock %}